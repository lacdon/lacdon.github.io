<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Raven相关研究</title>
    <url>/2019/12/13/Raven%E7%9B%B8%E5%85%B3%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h2 id="主要信息"><a href="#主要信息" class="headerlink" title="主要信息"></a>主要信息</h2><ol>
<li><p>出块时间 : 1分钟</p>
</li>
<li><p>块奖励 : 5000 //Jan 4, 2018 1:11:34 AM 创世块头，约2022年减半</p>
</li>
<li><p>难度调整周期 ：</p>
<ul>
<li>未启用黑暗重力波(DGW h &lt; 338778) : 2016个块, 取余</li>
<li>启用黑暗重力波动(DGW h &gt;= 338778) : 逐个块调整, 180块</li>
</ul>
</li>
<li><p>减半周期 : 2,100,000个块, 约4年</p>
</li>
<li><p>POW limit : 00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</p>
</li>
<li><p>P2P 通讯版本号 : 70025  <code>X16RV2_VERSION</code></p>
</li>
<li><p>magic number : </p>
<ul>
<li>主网 : <ul>
<li>倒 :  0x4e564152 // ‘N’ ‘V’ ‘A’ ‘R’</li>
<li>正 :  0x5241564e // ‘R’ ‘A’ ‘V’ ‘N’</li>
</ul>
</li>
<li>测试网 : <ul>
<li>倒 :  0x544e5652 // ‘T’ ‘N’ ‘V’ ‘R’</li>
<li>正 :  0x52564e54 // ‘R’ ‘V’ ‘N’ ‘T’</li>
</ul>
</li>
</ul>
</li>
<li><p>块头 和比特币一样 80bytes</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBlockHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// header</span></span><br><span class="line">    <span class="keyword">int32_t</span> nVersion;        <span class="comment">// 4</span></span><br><span class="line">    uint256 hashPrevBlock;   <span class="comment">// 32</span></span><br><span class="line">    uint256 hashMerkleRoot;  <span class="comment">// 32</span></span><br><span class="line">    <span class="keyword">uint32_t</span> nTime;          <span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">uint32_t</span> nBits;          <span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">uint32_t</span> nNonce;         <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>算法 </p>
<ol>
<li><p>x16r算法 第二代</p>
<table>
<thead>
<tr>
<th align="left">Number=Hashing algorithm</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0=Blake</td>
</tr>
<tr>
<td align="left">1=BMW</td>
</tr>
<tr>
<td align="left">2=Groestl</td>
</tr>
<tr>
<td align="left">3=Jh</td>
</tr>
<tr>
<td align="left">4=Keccak</td>
</tr>
<tr>
<td align="left">5=Skein</td>
</tr>
<tr>
<td align="left">6=Luffa</td>
</tr>
<tr>
<td align="left">7=Cubehash</td>
</tr>
<tr>
<td align="left">8=Shavite</td>
</tr>
<tr>
<td align="left">9=Simd</td>
</tr>
<tr>
<td align="left">A=Echo</td>
</tr>
<tr>
<td align="left">B=Hamsi</td>
</tr>
<tr>
<td align="left">C=Fugue</td>
</tr>
<tr>
<td align="left">D=Shabal</td>
</tr>
<tr>
<td align="left">E=Whirlpool</td>
</tr>
<tr>
<td align="left">F=SHA-512</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
</ol>
<h2 id="参数相关代码"><a href="#参数相关代码" class="headerlink" title="参数相关代码"></a>参数相关代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Pow limit = <span class="number">00000f</span>ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span><br><span class="line"></span><br><span class="line">    CMainParams() &#123;</span><br><span class="line">        strNetworkID = <span class="string">"main"</span>;</span><br><span class="line">        consensus.nSubsidyHalvingInterval = <span class="number">2100000</span>;  <span class="comment">//~ 4 yrs at 1 min block time. 2,100,000</span></span><br><span class="line">        consensus.nBIP34Enabled = <span class="literal">true</span>;</span><br><span class="line">        consensus.nBIP65Enabled = <span class="literal">true</span>; <span class="comment">// 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0</span></span><br><span class="line">        consensus.nBIP66Enabled = <span class="literal">true</span>;</span><br><span class="line">        consensus.nSegwitEnabled = <span class="literal">true</span>;</span><br><span class="line">        consensus.nCSVEnabled = <span class="literal">true</span>;</span><br><span class="line">        consensus.powLimit = uint256S(<span class="string">"00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"</span>);</span><br><span class="line">        consensus.nPowTargetTimespan = <span class="number">2016</span> * <span class="number">60</span>; <span class="comment">// 1.4 days 120960秒，2016分钟,也就是2016/60=33.6小时，1.4天2016个块</span></span><br><span class="line">        consensus.nPowTargetSpacing = <span class="number">1</span> * <span class="number">60</span>; <span class="comment">// 60秒一个块 ， 1分钟一个块</span></span><br><span class="line">        consensus.fPowAllowMinDifficultyBlocks = <span class="literal">false</span>; <span class="comment">//只有测试网允许</span></span><br><span class="line">        consensus.fPowNoRetargeting = <span class="literal">false</span>;</span><br><span class="line">        consensus.nRuleChangeActivationThreshold = <span class="number">1814</span>; <span class="comment">// Approx 90% of 2016</span></span><br><span class="line">        consensus.nMinerConfirmationWindow = <span class="number">2016</span>; <span class="comment">// nPowTargetTimespan / nPowTargetSpacing // 确认时间= 难度调整周期</span></span><br><span class="line">        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].<span class="built_in">bit</span> = <span class="number">28</span>;</span><br><span class="line">        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = <span class="number">1199145601</span>; <span class="comment">// January 1, 2008</span></span><br><span class="line">        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = <span class="number">1230767999</span>; <span class="comment">// December 31, 2008</span></span><br><span class="line">        consensus.vDeployments[Consensus::DEPLOYMENT_ASSETS].<span class="built_in">bit</span> = <span class="number">6</span>;  <span class="comment">//Assets (RIP2)</span></span><br><span class="line">        consensus.vDeployments[Consensus::DEPLOYMENT_ASSETS].nStartTime = <span class="number">1540944000</span>; <span class="comment">// Oct 31, 2018</span></span><br><span class="line">        consensus.vDeployments[Consensus::DEPLOYMENT_ASSETS].nTimeout = <span class="number">1572480000</span>; <span class="comment">// Oct 31, 2019</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// The best chain should have at least this much work.</span></span><br><span class="line">        consensus.nMinimumChainWork = uint256S(<span class="string">"0x00"</span>); <span class="comment">// 最小工作量</span></span><br><span class="line">        <span class="comment">// By default assume that the signatures in ancestors of this block are valid.</span></span><br><span class="line">        consensus.defaultAssumeValid = uint256S(<span class="string">"0x00"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The best chain should have at least this much work.</span></span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> This needs to be changed when we re-start the chain</span></span><br><span class="line">        <span class="comment">//consensus.nMinimumChainWork = uint256S("0x000000000000000000000000000000000000000000000000000000000c000c00");</span></span><br><span class="line">        <span class="comment">//TODO - Set this to genesis block</span></span><br><span class="line">        <span class="comment">// By default assume that the signatures in ancestors of this block are valid.</span></span><br><span class="line">        <span class="comment">//consensus.defaultAssumeValid = uint256S("0x0000000000000000003b9ce759c2a087d52abc4266f8f4ebd6d768b89defa50a"); //477890</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The message start string is designed to be unlikely to occur in normal data.</span></span><br><span class="line"><span class="comment">         * The characters are rarely used upper ASCII, not valid as UTF-8, and produce</span></span><br><span class="line"><span class="comment">         * a large 32-bit integer with any alignment.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">	<span class="comment">// magic number</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//主网络</span></span><br><span class="line">	MainNetBitcoinNet=<span class="number">0x4e564152</span><span class="comment">//'N''V''A''R'</span></span><br><span class="line">	<span class="comment">//测试网</span></span><br><span class="line">	TestNetBitcoinNet=<span class="number">0x544e5652</span><span class="comment">//'T''N''V''R'</span></span><br><span class="line">	</span><br><span class="line">        pchMessageStart[<span class="number">0</span>] = <span class="number">0x52</span>; <span class="comment">// R</span></span><br><span class="line">        pchMessageStart[<span class="number">1</span>] = <span class="number">0x41</span>; <span class="comment">// A</span></span><br><span class="line">        pchMessageStart[<span class="number">2</span>] = <span class="number">0x56</span>; <span class="comment">// V</span></span><br><span class="line">        pchMessageStart[<span class="number">3</span>] = <span class="number">0x4e</span>; <span class="comment">// N</span></span><br><span class="line">        nDefaultPort = <span class="number">8767</span>;</span><br><span class="line">        nPruneAfterHeight = <span class="number">100000</span>;</span><br><span class="line">        genesis = CreateGenesisBlock(<span class="number">1514999494</span>, <span class="number">25023712</span>, <span class="number">0x1e00ffff</span>, <span class="number">4</span>, <span class="number">5000</span> * COIN);</span><br><span class="line">        consensus.hashGenesisBlock = genesis.GetX16RHash();</span><br><span class="line">        assert(consensus.hashGenesisBlock == uint256S(<span class="string">"0000006b444bc2f2ffe627be9d9e7e7a0730000870ef6eb6da46c8eae389df90"</span>));</span><br><span class="line">        assert(genesis.hashMerkleRoot == uint256S(<span class="string">"28ff00a867739a352523808d301f504bc4547699398d70faf2266a8bae5f3516"</span>));</span><br><span class="line">        vSeeds.emplace_back(<span class="string">"seed-raven.bitactivate.com"</span>, <span class="literal">false</span>);</span><br><span class="line">        vSeeds.emplace_back(<span class="string">"seed-raven.ravencoin.com"</span>, <span class="literal">false</span>);</span><br><span class="line">        vSeeds.emplace_back(<span class="string">"seed-raven.ravencoin.org"</span>, <span class="literal">false</span>);</span><br><span class="line">        base58Prefixes[PUBKEY_ADDRESS] = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;(<span class="number">1</span>,<span class="number">60</span>);</span><br><span class="line">        base58Prefixes[SCRIPT_ADDRESS] = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;(<span class="number">1</span>,<span class="number">122</span>);</span><br><span class="line">        base58Prefixes[SECRET_KEY] =     <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;(<span class="number">1</span>,<span class="number">128</span>);</span><br><span class="line">        base58Prefixes[EXT_PUBLIC_KEY] = &#123;<span class="number">0x04</span>, <span class="number">0x88</span>, <span class="number">0xB2</span>, <span class="number">0x1E</span>&#125;;</span><br><span class="line">        base58Prefixes[EXT_SECRET_KEY] = &#123;<span class="number">0x04</span>, <span class="number">0x88</span>, <span class="number">0xAD</span>, <span class="number">0xE4</span>&#125;;</span><br><span class="line">        vFixedSeeds = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;SeedSpec6&gt;(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));</span><br><span class="line">        fDefaultConsistencyChecks = <span class="literal">false</span>;</span><br><span class="line">        fRequireStandard = <span class="literal">true</span>;</span><br><span class="line">        fMineBlocksOnDemand = <span class="literal">false</span>;</span><br><span class="line">        fMiningRequiresPeers = <span class="literal">true</span>;</span><br><span class="line">        checkpointData = (CCheckpointData) &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123; <span class="number">535721</span>, uint256S(<span class="string">"0x000000000001217f58a594ca742c8635ecaaaf695d1a63f6ab06979f1c159e04"</span>)&#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        chainTxData = ChainTxData&#123;</span><br><span class="line">            <span class="comment">// Update as we know more about the contents of the Raven chain</span></span><br><span class="line">            <span class="comment">// Stats as of 000000000000a72545994ce72b25042ea63707fca169ca4deb7f9dab4f1b1798 window size 43200</span></span><br><span class="line">            <span class="number">1543817453</span>, <span class="comment">// * UNIX timestamp of last known number of transactions</span></span><br><span class="line">            <span class="number">2033711</span>,    <span class="comment">// * total number of transactions between genesis and that timestamp</span></span><br><span class="line">                        <span class="comment">//   (the tx=... number in the SetBestChain debug.log lines)</span></span><br><span class="line">            <span class="number">0.1</span>         <span class="comment">// * estimated number of transactions per second after that timestamp</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/** RVN Start **/</span></span><br><span class="line">        <span class="comment">// Burn Amounts</span></span><br><span class="line">        nIssueAssetBurnAmount = <span class="number">500</span> * COIN;</span><br><span class="line">        nReissueAssetBurnAmount = <span class="number">100</span> * COIN;</span><br><span class="line">        nIssueSubAssetBurnAmount = <span class="number">100</span> * COIN;</span><br><span class="line">        nIssueUniqueAssetBurnAmount = <span class="number">5</span> * COIN;</span><br><span class="line">        <span class="comment">// Burn Addresses</span></span><br><span class="line">        strIssueAssetBurnAddress = <span class="string">"RXissueAssetXXXXXXXXXXXXXXXXXhhZGt"</span>;</span><br><span class="line">        strReissueAssetBurnAddress = <span class="string">"RXReissueAssetXXXXXXXXXXXXXXVEFAWu"</span>;</span><br><span class="line">        strIssueSubAssetBurnAddress = <span class="string">"RXissueSubAssetXXXXXXXXXXXXXWcwhwL"</span>;</span><br><span class="line">        strIssueUniqueAssetBurnAddress = <span class="string">"RXissueUniqueAssetXXXXXXXXXXWEAe58"</span>;</span><br><span class="line">        <span class="comment">//Global Burn Address</span></span><br><span class="line">        strGlobalBurnAddress = <span class="string">"RXBurnXXXXXXXXXXXXXXXXXXXXXXWUo9FV"</span>;</span><br><span class="line">        <span class="comment">// DGW Activation</span></span><br><span class="line">        nDGWActivationBlock = <span class="number">338778</span>;</span><br><span class="line">        nX16RV2ActivationTime = <span class="number">1569945600</span>; <span class="comment">//Tue Oct 01 2019 16:00:00 UTC</span></span><br><span class="line">        nMaxReorganizationDepth = <span class="number">60</span>; <span class="comment">// 60 at 1 minute block timespan is +/- 60 minutes.</span></span><br><span class="line">        nMinReorganizationPeers = <span class="number">4</span>;</span><br><span class="line">        nMinReorganizationAge = <span class="number">60</span> * <span class="number">60</span> * <span class="number">12</span>; <span class="comment">// 12 hours</span></span><br><span class="line">        <span class="comment">/** RVN End **/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Version.h</span></span><br><span class="line"><span class="comment">//当前版本号为 70025</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> PROTOCOL_VERSION = <span class="number">70025</span>;</span><br><span class="line"><span class="comment">//! initial proto version, to be increased after version/verack negotiation</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> INIT_PROTO_VERSION = <span class="number">209</span>;</span><br><span class="line"><span class="comment">//! In this version, 'getheaders' was introduced.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> GETHEADERS_VERSION = <span class="number">31800</span>;</span><br><span class="line"><span class="comment">//! assetdata network request is allowed for this version</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> ASSETDATA_VERSION = <span class="number">70017</span>;</span><br><span class="line"><span class="comment">//! disconnect from peers older than this proto version</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MIN_PEER_PROTO_VERSION = ASSETDATA_VERSION;</span><br><span class="line"><span class="comment">//! nTime field added to CAddress, starting with this version;</span></span><br><span class="line"><span class="comment">//! if possible, avoid requesting addresses nodes older than this</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> CADDR_TIME_VERSION = <span class="number">31402</span>;</span><br><span class="line"><span class="comment">//! BIP 0031, pong message, is enabled for all versions AFTER this one</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> BIP0031_VERSION = <span class="number">60000</span>;</span><br><span class="line"><span class="comment">//! "filter*" commands are disabled without NODE_BLOOM after and including this version</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> NO_BLOOM_VERSION = <span class="number">70011</span>;</span><br><span class="line"><span class="comment">//! "sendheaders" command and announcing blocks with headers starts with this version</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> SENDHEADERS_VERSION = <span class="number">70012</span>;</span><br><span class="line"><span class="comment">//! "feefilter" tells peers to filter invs to you by fee starts with this version</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> FEEFILTER_VERSION = <span class="number">70013</span>;</span><br><span class="line"><span class="comment">//! short-id-based block download starts with this version</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> SHORT_IDS_BLOCKS_VERSION = <span class="number">70014</span>;</span><br><span class="line"><span class="comment">//! not banning for invalid compact blocks starts with this version</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> INVALID_CB_NO_BAN_VERSION = <span class="number">70015</span>;</span><br><span class="line"><span class="comment">//! getassetdata reutrn asstnotfound, and assetdata doesn't have blockhash in the data</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> ASSETDATA_VERSION_UPDATED = <span class="number">70020</span>;</span><br><span class="line"><span class="comment">//! getassetdata reutrn asstnotfound, and assetdata doesn't have blockhash in the data</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> X16RV2_VERSION = <span class="number">70025</span>;</span><br></pre></td></tr></table></figure>

<h2 id="难度调整代码"><a href="#难度调整代码" class="headerlink" title="难度调整代码"></a>难度调整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pow.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">static</span> <span class="title">DarkGravityWave</span><span class="params">(<span class="keyword">const</span> CBlockIndex* pindexLast, <span class="keyword">const</span> CBlockHeader *pblock, <span class="keyword">const</span> Consensus::ConsensusParams&amp; params)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* current difficulty formula, dash - DarkGravity v3, written by Evan Duffield - evan@dash.org */</span></span><br><span class="line">    assert(pindexLast != <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();</span><br><span class="line">    <span class="keyword">const</span> arith_uint256 bnPowLimit = UintToArith256(params.powLimit);</span><br><span class="line">    <span class="keyword">int64_t</span> nPastBlocks = <span class="number">180</span>; <span class="comment">// ~3hr</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// make sure we have at least (nPastBlocks + 1) blocks, otherwise just return powLimit</span></span><br><span class="line">    <span class="keyword">if</span> (!pindexLast || pindexLast-&gt;nHeight &lt; nPastBlocks) &#123;</span><br><span class="line">        <span class="keyword">return</span> bnPowLimit.GetCompact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (params.fPowAllowMinDifficultyBlocks &amp;&amp; params.fPowNoRetargeting) &#123;</span><br><span class="line">        <span class="comment">// Special difficulty rule:</span></span><br><span class="line">        <span class="comment">// If the new block's timestamp is more than 2 * 1 minutes</span></span><br><span class="line">        <span class="comment">// then allow mining of a min-difficulty block.</span></span><br><span class="line">        <span class="keyword">if</span> (pblock-&gt;GetBlockTime() &gt; pindexLast-&gt;GetBlockTime() + params.nPowTargetSpacing * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> nProofOfWorkLimit;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Return the last non-special-min-difficulty-rules-block</span></span><br><span class="line">            <span class="keyword">const</span> CBlockIndex *pindex = pindexLast;</span><br><span class="line">            <span class="keyword">while</span> (pindex-&gt;pprev &amp;&amp; pindex-&gt;nHeight % params.DifficultyAdjustmentInterval() != <span class="number">0</span> &amp;&amp;</span><br><span class="line">                   pindex-&gt;nBits == nProofOfWorkLimit)</span><br><span class="line">                pindex = pindex-&gt;pprev;</span><br><span class="line">            <span class="keyword">return</span> pindex-&gt;nBits;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> CBlockIndex *pindex = pindexLast;</span><br><span class="line">    arith_uint256 bnPastTargetAvg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> nCountBlocks = <span class="number">1</span>; nCountBlocks &lt;= nPastBlocks; nCountBlocks++) &#123;</span><br><span class="line">        arith_uint256 bnTarget = arith_uint256().SetCompact(pindex-&gt;nBits);</span><br><span class="line">        <span class="keyword">if</span> (nCountBlocks == <span class="number">1</span>) &#123;</span><br><span class="line">            bnPastTargetAvg = bnTarget;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">NOTE:</span> that's not an average really...</span></span><br><span class="line">            bnPastTargetAvg = (bnPastTargetAvg * nCountBlocks + bnTarget) / (nCountBlocks + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nCountBlocks != nPastBlocks) &#123;</span><br><span class="line">            assert(pindex-&gt;pprev); <span class="comment">// should never fail</span></span><br><span class="line">            pindex = pindex-&gt;pprev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">arith_uint256 <span class="title">bnNew</span><span class="params">(bnPastTargetAvg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int64_t</span> nActualTimespan = pindexLast-&gt;GetBlockTime() - pindex-&gt;GetBlockTime();</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> is this accurate? nActualTimespan counts it for (nPastBlocks - 1) blocks only...</span></span><br><span class="line">    <span class="keyword">int64_t</span> nTargetTimespan = nPastBlocks * params.nPowTargetSpacing;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nActualTimespan &lt; nTargetTimespan/<span class="number">3</span>)</span><br><span class="line">        nActualTimespan = nTargetTimespan/<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (nActualTimespan &gt; nTargetTimespan*<span class="number">3</span>)</span><br><span class="line">        nActualTimespan = nTargetTimespan*<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Retarget</span></span><br><span class="line">    bnNew *= nActualTimespan;</span><br><span class="line">    bnNew /= nTargetTimespan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bnNew &gt; bnPowLimit) &#123;</span><br><span class="line">        bnNew = bnPowLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bnNew.GetCompact();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>blockchain</tag>
        <tag>cryptocoin</tag>
      </tags>
  </entry>
  <entry>
    <title>framework</title>
    <url>/2019/12/13/framework/</url>
    <content><![CDATA[<h1 id="构架思考"><a href="#构架思考" class="headerlink" title="构架思考"></a>构架思考</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;http:&#x2F;&#x2F;www.google.com[blank]</span><br><span class="line">e&#x3D;&gt;end:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">op1&#x3D;&gt;operation: My Operation</span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine</span><br><span class="line">cond&#x3D;&gt;condition: Yes</span><br><span class="line">or No?:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
